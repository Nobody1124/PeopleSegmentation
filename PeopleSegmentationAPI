import io
import cv2
import numpy as np
import tensorflow as tf
from PIL import Image
from flask import Flask, request, jsonify

app = Flask(__name__)

# Load the model from a HDF5 file
model = tf.keras.models.load_model('UnetColor_kaggle_89832_8.hdf5')

# Define the input and output image sizes
input_size = (512, 512)
output_size = (512, 512)

# Define the API endpoint for applying the segmentation model
@app.route('/segmentation', methods=['POST'])
def segmentation():
    # Get the input image from the request
    file = request.files['image']
    img = Image.open(io.BytesIO(file.read()))

    # Convert the image to a numpy array
    img = np.array(img)

    # Resize the image to the input size of the model
    img = cv2.resize(img, input_size)

    # Normalize the image to values between 0 and 1
    img = img / 255.0

    # Apply the model to the image
    mask = model.predict(np.array([img]))[0]

    # Resize the mask to the output size
    mask = cv2.resize(mask, output_size)

    # Threshold the mask to create a binary image
    mask = mask > 0.5

    # Convert the mask to an image and save it to a buffer
    output = io.BytesIO()
    Image.fromarray(np.uint8(mask * 255)).save(output, format='PNG')
    output.seek(0)

    # Convert the binary image data to a NumPy array
    img_data = np.frombuffer(output.getvalue(), dtype=np.uint8)

    # Read the image from the NumPy array using OpenCV
    img = cv2.imdecode(img_data, cv2.IMREAD_COLOR)

    # Return the binary image data as a response
    retval, buffer = cv2.imencode('.png', img)
    response = buffer.tobytes()
    return response, 200, {'Content-Type': 'image/png'}

# Run the API server
if __name__ == '__main__':
    app.run()
